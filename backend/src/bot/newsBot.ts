// src/bot/newsBot.ts
import TelegramBot from "node-telegram-bot-api";
import { fetchAllNews as fetchNewsAPI } from "./newsapiService";
import { fetchAllNews as fetchGuardianNews } from "./guardianService";
import dotenv from "dotenv";
import { Translate } from "@google-cloud/translate/build/src/v2";
dotenv.config();

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN!, { polling: false });
const chatId = process.env.TELEGRAM_CHAT_ID!;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Translate
const translate = new Translate({
  projectId: process.env.GOOGLE_PROJECT_ID,
  key: process.env.GOOGLE_API_KEY,
});

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
async function translateText(text: string, target: string = "ru") {
  try {
    const [translation] = await translate.translate(text, target);
    return translation;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", err);
    return text; // –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
function formatMessage(title: string, description: string, url: string) {
  return `<b>${title}</b>\n${description}\n\n` +
         `<a href="${url}">–û—Ä–∏–≥–∏–Ω–∞–ª</a> | ` +
         `<a href="https://t.me/your_channel">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</a> | ` +
         `<a href="https://yourwebsite.com">–ù–∞—à —Å–∞–π—Ç</a>`;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram
async function sendNews(news: { title: string; description: string; url: string; imageUrl?: string }) {
  const translatedDescription = await translateText(news.description);

  const message = formatMessage(news.title, translatedDescription, news.url);

  try {
    if (news.imageUrl) {
      await bot.sendPhoto(chatId, news.imageUrl, { parse_mode: "HTML", caption: message });
    } else {
      await bot.sendMessage(chatId, message, { parse_mode: "HTML" });
    }
    console.log(`‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${news.title}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏:", err);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

  // –ê–ª—å—Ç–µ—Ä–Ω–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  let toggle = true;

  setInterval(async () => {
    try {
      let newsList;
      if (toggle) {
        newsList = await fetchNewsAPI(); // –ø–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ NewsAPI
      } else {
        newsList = await fetchGuardianNews(); // —Å–ª–µ–¥—É—é—â–∞—è –∏–∑ Guardian
      }
      toggle = !toggle;

      if (newsList.length > 0) {
        // Map the provider-specific NewsItem to the shape expected by sendNews
        const first = newsList[0] as any;
        const mapped = {
          title: first.title || first.webTitle || "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞",
          description:
            first.description ||
            first.summary ||
            (first.fields && (first.fields.trailText || first.fields.body)) ||
            "",
          url:
            first.url ||
            first.link ||
            first.webUrl ||
            (first.fields && first.fields.shortUrl) ||
            "",
          imageUrl:
            first.imageUrl ||
            first.image ||
            (first.fields && (first.fields.thumbnail || first.fields.main)) ||
            undefined,
        };
        await sendNews(mapped); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:", err);
    }
  }, 10 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–∞–∑ –≤ —á–∞—Å (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
  setInterval(async () => {
    try {
      await fetchNewsAPI();
      await fetchGuardianNews();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:", err);
    }
  }, 60 * 60 * 1000);
}

main();
