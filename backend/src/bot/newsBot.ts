import TelegramBot from "node-telegram-bot-api";

// Local NewsItem type and a simple fetchAllNews stub to avoid missing-module compile errors.
// Replace this stub with the real implementation or restore the service module when available.
export interface NewsItem {
  id: string;
  title: string;
  description?: string;
  photo?: string;
  video?: string;
}

export async function fetchAllNews(): Promise<NewsItem[]> {
  // TODO: implement actual fetching from your backend; returning empty array to satisfy types for now.
  return [];
}

// ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
const TOKEN = "8431433486:AAEg6PX6MnnXn7dB_n8redyKXk9YPDlCK_0";
const CHAT_ID = "-1002964146420"; // –≤–∞—à –∫–∞–Ω–∞–ª
const OUR_SITE = "https://–≤–∞—à-—Å–∞–π—Ç.com";
const SUBSCRIBE_LINK = "https://t.me/wichtigernews";

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ =====
const bot = new TelegramBot(TOKEN, { polling: false });

// ===== –û—á–µ—Ä–µ–¥—å –∏ –∏—Å—Ç–æ—Ä–∏—è =====
let newsQueue: NewsItem[] = [];
const sentNewsIds = new Set<string>();

// ===== –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ =====
async function sendNews(news: NewsItem) {
  const caption = `<b>${news.title}</b>\n${news.description || ""}\n\n` +
                  `<a href="${SUBSCRIBE_LINK}">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</a> | ` +
                  `<a href="${OUR_SITE}">–ù–∞—à —Å–∞–π—Ç</a>`;

  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if (news.video && news.video.startsWith("http")) {
      await bot.sendVideo(CHAT_ID, news.video, { parse_mode: "HTML", caption });
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: ${news.title.slice(0, 50)}...`);
    }
    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    else if (news.photo && news.photo.startsWith("http")) {
      await bot.sendPhoto(CHAT_ID, news.photo, { parse_mode: "HTML", caption });
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ${news.title.slice(0, 50)}...`);
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ñ–æ—Ç–æ, –Ω–∏ –≤–∏–¥–µ–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    else {
      await bot.sendMessage(CHAT_ID, caption, { parse_mode: "HTML" });
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–º: ${news.title.slice(0, 50)}...`);
    }

    sentNewsIds.add(news.id);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏:", err);
  }
}

// ===== –ü–æ–¥–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –±–µ–∫–µ–Ω–¥–∞ =====
async function loadNews() {
  try {
    const allNews = await fetchAllNews();
    const newArticles = allNews.filter((n: NewsItem) => !sentNewsIds.has(n.id));
    newsQueue.push(...newArticles);
    console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${newArticles.length}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:", err);
  }
}

// ===== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ =====
async function sendNextNews() {
  if (newsQueue.length === 0) {
    await loadNews();
  }

  if (newsQueue.length > 0) {
    const next = newsQueue.shift()!;
    await sendNews(next);
  } else {
    console.log("üïí –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏");
  }
}

// ===== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ =====
setInterval(sendNextNews, 15 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

// ===== –°—Ç–∞—Ä—Ç =====
console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç.");
loadNews().then(() => sendNextNews());
